#
# Gitlab CI script for building and deploying Maat packages internally to
# APL.
#
# This script assumes the following:
#  - There are (at least) two runners:
#       - A redhat machine (tagged 'redhat'), with 'mock' configured
#       - A ubuntu machine (tagged 'ubuntu'), with 'pbuilder-dist' configured
#  - That the gitlab runner user has permission to use mock/pbuilder
#  - That all necesary build requirements are installed
#  - AddressSanitizer is avilable
#  - For deploy, 'createrepo' and 'reprepro' need to be available on the 
#     'ubuntu' runner
#  - The build runners need access to iol-archive and have key-based 
#    authentication configured for the 'builder' user on that machine.
#  - The build runners need http access to iol-gitlab to pull down the latest
#    copy of maat and build it. 
# 

variables:
        GIT_STRATEGY: clone

stages:
        - sara-kickoff
        - build
        - docs
        - test
        - package
        - deploy
        - systemtest
        #- sara-collect

# Macros to build packages and tests. 
.package-deb: &deb_build
        script:
                #- "#[ \"${arch}\" == \"amd64\" -a -e ~/pbuilder/${release}-base.tgz ] || /usr/bin/pbuilder-dist ${release} ${arch} create"
                #- "#[ \"${arch}\" == \"i386\" -a -e ~/pbuilder/${release}-${arch}-base.tgz ] || /usr/bin/pbuilder-dist ${release} ${arch} create"
                - "/usr/bin/pbuilder-dist ${release} ${arch} create"
                - "/usr/bin/pbuilder-dist ${release} ${arch} update"
                - "[ -d build ] || mkdir build"
                - lsb_release -a
                - autoreconf -i
                - cd build
                - ../configure --prefix=/usr --disable-selinux --disable-tpm
                - make dist
                - cd ..
                - rm -rf tmp staging
                - mkdir staging
                - cp build/maat-*.tar.gz staging
                - mkdir tmp
                - cd tmp
                - tar xzf ../build/maat-*.tar.gz 
                - sed -i.bak "s/-1)/-1${release}0)/g" maat-*/debian/changelog
                - dpkg-source -b maat-*
                - "echo $PBSAT"
                - "echo \"PBUILDERSATISFYDEPENDSCMD=${PBSAT}\" > ~/.pbset-${release}-${arch}"
                - "/usr/bin/pbuilder-dist ${release} ${arch} build --buildresult $PWD/../staging/${release}-${arch}-results --configfile ~/.pbset-${release}-${arch} maat*${release}*.dsc"
                - "cd .."

.package-rpm: &rpm_build
        script:
                - "[ -d build ] || mkdir build"
                - cat /etc/redhat-release
                - autoreconf -i
                - cd build
                - ../configure --prefix=/usr --disable-selinux-libdir-mapping --disable-tpm
                #- ../configure --prefix=/usr --disable-selinux
                - make dist
                - cd ..
                - "[ -d SOURCES ] || mkdir SOURCES"
                - cp build/maat-*.tar.gz SOURCES/
                - mkdir -p staging/epel/${release}/${arch}
                - cd staging/epel/${release}/${arch}
                - createrepo -p -d -v -s sha .
                - cd ../../../../
                - cp /etc/mock/epel-${release}-${arch}.cfg .
                - mock -r epel-${release}-${arch}.cfg --buildsrpm --spec rpm/maat.spec --sources SOURCES
                - rm -rf staging/epel/${release}/${arch}/maat-*.src.rpm
                - cp /var/lib/mock/epel-${release}-${arch}/result/maat-*.src.rpm staging/epel/${release}/${arch}
                - mock -v --no-clean -r epel-${release}-${arch}.cfg --rebuild staging/epel/${release}/${arch}/maat-*.src.rpm
                - rm -f staging/epel/${release}/${arch}/maat-*.rpm
                - cp -v  /var/lib/mock/epel-${release}-${arch}/result/maat-*.rpm staging/epel/${release}/${arch}/
                - cd staging/epel/${release}/${arch}
                - createrepo -p -d -v -s sha .
                - cd ../../../../

#
# Build targets
#
build-ubuntu:
        stage: build
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --disable-tpm"
                - "make"
                - "make install"
        tags:
                - ubuntu

build-ubuntu-tpm:
        stage: build
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux"
                - "make"
                - "make install"
        tags:
                - maat-swtpm

build-redhat-selinux:
        stage: build
        variables:
                GIT_SSL_NO_VERIFY: "1"
        script:
                - echo " =========== Building Maat ================"
                - cat /etc/redhat-release
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-tpm"
                - "make"
                - "make install"
        tags:
                - redhat

#build-centos-selinux:
#        stage: build
#        variables:
#                GIT_SSL_NO_VERIFY: "1"
#        script:
#                - echo " =========== Building Maat ================"
#                - cat /etc/centos-release
#                - "autoreconf -i"
#                - "[ -d build ] || mkdir build"
#                - "cd build"
#                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd"
#                - "make"
#                - "make install"
#        tags:
#                - centos

build-redhat:
        stage: build
        variables:
                GIT_SSL_NO_VERIFY: "1"
        script:
                - echo " =========== Building Maat ================"
                - cat /etc/redhat-release
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --disable-tpm"
                - "make"
                - "make install"
        tags:
                - redhat

test-ubuntu-basic:
        stage: test
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests --disable-tpm"
                - "make"
                - "make check"
        tags:
                - ubuntu
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure

test-ubuntu-tpm-basic:
        stage: test
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests"
                - "make"
                - "make check"
        tags:
                - maat-swtpm
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure

docs-ubuntu:
        stage: docs
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests --disable-tpm"
                - "make"
                - "make docs"
                - "mv documentation/build ../maat-docs"
        tags:
                - "ubuntu"
        allow_failure: true
        artifacts:
                paths:
                        - maat-docs
                expire_in: 2 weeks
                when: on_success
                
docs-ubuntu-tpm:
        stage: docs
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests"
                - "make"
                - "make docs"
                - "mv documentation/build ../maat-docs"
        tags:
                - "maat-swtpm"
        allow_failure: true
        artifacts:
                paths:
                        - maat-docs
                expire_in: 2 weeks
                when: on_success

# Note: Unit tests won't run with selinux enabled.

test-redhat-basic:
        stage: test
        variables:
                GIT_SSL_NO_VERIFY: "1"
        script:
                - echo " =========== Building Maat ================"
                - cat /etc/redhat-release
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --enable-tests --disable-selinux --disable-tpm"
                - "make"
                - "make check"
        tags:
                - redhat
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure

#test-ubuntu-coverage:
#        stage: test
#        script:
#                - echo " =========== Building Maat ================"
#                - lsb_release -a
#                - "aut2oreconf -i"
#                - "[ -d build ] || mkdir build"
#                - "cd build"
#                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests --enable-coverage"
#                - "make"
#                - "python ../src/test/gcovr -d -e test -e example . -r . -o /dev/null"
#                - "make check"
#                - "python ../src/test/gcovr -e test -e example -x -o coverage.xml -r ."
#                - "python ../src/test/gcovr -d -e test -e example -r ."
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - build/coverage.xml
#                expire_in: 2 weeks

#test-redhat-coverage:
#        stage: test
#        variables:
#                GIT_SSL_NO_VERIFY: "1"
#        script:
#                - echo " =========== Building Maat ================"
#                - cat /etc/redhat-release
#                - "autoreconf -i"
#                - "[ -d build ] || mkdir build"
#                - "cd build"
#                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --enable-tests --enable-coverage --disable-selinux"
#                - "make"
#                - "python ../src/test/gcovr -d -e test -e example . -r . -o /dev/null"
#                - "make check"
#                - "python ../src/test/gcovr -d -e test -e example -x -o coverage.xml -r ."
#        tags:
#                - redhat
#        artifacts:
#                paths:
#                        - build/coverage.xml
#                expire_in: 2 weeks

test-ubuntu-asan:
        stage: test
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --disable-tpm --enable-tests CFLAGS='-fsanitize=address -g -O0'"
                - "make"
                - "ASAN_OPTIONS=detect_leaks=0 make check"
        tags:
                - ubuntu
        allow_failure: true
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure

test-ubuntu-tpm-asan:
        stage: test
        script:
                - echo " =========== Building Maat ================"
                - lsb_release -a
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-selinux --enable-tests CFLAGS='-fsanitize=address -g -O0'"
                - "make"
                - "ASAN_OPTIONS=detect_leaks=0 make check"
        tags:
                - maat-swtpm
        allow_failure: true
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure

test-redhat-asan:
        stage: test
        variables:
                GIT_SSL_NO_VERIFY: "1"
        script:
                - echo " =========== Building Maat ================"
                - cat /etc/redhat-release
                - "autoreconf -i"
                - "[ -d build ] || mkdir build"
                - "cd build"
                - "../configure --prefix=$PWD/../inst --with-systemdsystemunitdir=$PWD/../inst/lib/systemd --disable-tpm --enable-tests CFLAGS='-fsanitize=address -g -O0' --disable-selinux"
                - "make"
                - "ASAN_OPTIONS=detect_leaks=0 make check"
        tags:
                - redhat
        allow_failure: true
        artifacts:
                paths:
                        - build/src/test/*.log
                expire_in: 2 weeks
                when: on_failure


#package-ubuntu-trusty-amd64-deb:
#        stage: package
#        variables:
#                release: trusty
#                arch: amd64
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#
#package-ubuntu-trusty-i386-deb:
#        stage: package
#        variables:
#                release: trusty
#                arch: i386
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#
#package-ubuntu-xenial-amd64-deb:
#        stage: package
#        variables:
#                release: xenial
#                arch: amd64
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#
#package-ubuntu-xenial-i386-deb:
#        stage: package
#        variables:
#                release: xenial
#                arch: i386
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks

package-ubuntu-bionic-amd64-deb:
        stage: package
        variables:
                release: bionic
                arch: amd64
                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
        <<: *deb_build
        tags:
                - ubuntu
        artifacts:
                paths:
                        - staging
                expire_in: 2 weeks

package-ubuntu-focal-amd64-deb:
        stage: package
        variables:
                release: focal
                arch: amd64
                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-aptitude
        <<: *deb_build
        tags:
                - maat-swtpm
        artifacts:
                paths:
                        - staging
                expire_in: 2 weeks

#package-ubuntu-bionic-armhf-deb:
#        stage: package
#        variables:
#                release: bionic
#                arch: armhf
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-apt
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#        allow_failure: true
#
#package-ubuntu-bionic-arm64-deb:
#        stage: package
#        variables:
#                release: bionic
#                arch: arm64
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-apt
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#        allow_failure: true
#
#package-ubuntu-bionic-ppc64el-deb:
#        stage: package
#        variables:
#                release: bionic
#                arch: ppc64el
#                PBSAT: /usr/lib/pbuilder/pbuilder-satisfydepends-apt
#        <<: *deb_build
#        tags:
#                - ubuntu
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#        allow_failure: true
#
#package-epel-6-x86_64-rpm:
#        stage: package
#        variables:
#                release: "6"
#                arch: x86_64
#        <<: *rpm_build
#        tags:
#                - fedora
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks
#
#package-epel-6-i386-rpm:
#        stage: package
#        variables:
#                release: "6"
#                arch: i386
#        <<: *rpm_build
#        tags:
#                - fedora
#        artifacts:
#                paths:
#                        - staging
#                expire_in: 2 weeks

package-epel-7-x86_64-rpm:
        stage: package
        variables:
                release: "7"
                arch: x86_64
                GIT_SSL_NO_VERIFY: "1"
        <<: *rpm_build
        tags:
                - redhat
        artifacts:
                paths:
                        - staging
                expire_in: 2 weeks

create-rh7-repos:
        stage: deploy
        script:
                - "cd staging"
                - "scp -r epel builder@manda-archive:/home/builder/public_html/maat/maat-ci/maat-redhat/"
        tags:
                - redhat
        artifacts:
                paths:
                        - maat-$CI_COMMIT_REF_SLUG/
                expire_in: 2 weeks
        needs:
                - package-epel-7-x86_64-rpm

#
# Note, GitlabCI can't do multi-line or HERE comments, hence the "build file 
# line-by-line issue. 
#
create-repos:
        stage: deploy
        script:
                - "cd staging"
                - "mkdir -p ubuntu/conf"
                - "echo 'Origin: APL Maat Repo' > ubuntu/conf/distributions"
                #- "echo 'Label: APL-Maat' >>  ubuntu/conf/distributions" 
                #- "echo 'Codename: trusty' >>  ubuntu/conf/distributions"  
                #- "echo 'Architectures: i386 amd64'  >>  ubuntu/conf/distributions"
                #- "echo 'Components: multiverse' >>  ubuntu/conf/distributions"
                #- "echo 'Description: The official APL Maat Repo'  >>  ubuntu/conf/distributions"
                #- "echo 'SignWith: 8DC43B64'  >>  ubuntu/conf/distributions"
                #- "echo '' >>  ubuntu/conf/distributions"
                #- "echo 'Origin: APL Maat Repo' >> ubuntu/conf/distributions"
                #- "echo 'Label: APL-Maat' >>  ubuntu/conf/distributions"
                #- "echo 'Codename: xenial' >>  ubuntu/conf/distributions"  
                #- "echo 'Architectures: i386 amd64'  >>  ubuntu/conf/distributions"
                #- "echo 'Components: multiverse' >>  ubuntu/conf/distributions"
                #- "echo 'Description: The official APL Maat Repo'  >>  ubuntu/conf/distributions"
                #- "echo 'SignWith: 8DC43B64'  >>  ubuntu/conf/distributions"
                #- "echo '' >>  ubuntu/conf/distributions"
                #- "echo 'Origin: APL Maat Repo' >> ubuntu/conf/distributions"
                - "echo 'Label: APL-Maat' >>  ubuntu/conf/distributions"
                - "echo 'Codename: bionic' >>  ubuntu/conf/distributions"  
                - "echo 'Architectures: i386 amd64 arm64 armhf ppc64el'  >>  ubuntu/conf/distributions"
                - "echo 'Components: multiverse' >>  ubuntu/conf/distributions"
                - "echo 'Description: The official APL Maat Repo'  >>  ubuntu/conf/distributions"
                - "echo 'SignWith: 08123D97BA5BEA706C0D06D1AC5CF4C3F7464DA8'  >>  ubuntu/conf/distributions"
                - "echo '' >>  ubuntu/conf/distributions"
                - "echo 'basedir .' > ubuntu/conf/options"
                - cd ubuntu
                #- reprepro -V includedeb trusty ../trusty-*-results/maat*.deb
                #- reprepro -V includedeb xenial ../xenial-*-results/maat*.deb
                - reprepro -V includedeb bionic ../bionic-*-results/maat*.deb
                - cd ../..
                - mv staging maat-$CI_COMMIT_REF_SLUG
                - "scp -r maat-$CI_COMMIT_REF_SLUG builder@manda-archive.jhuapl.edu:public_html/maat/"

        tags:
                - ubuntu
        artifacts:
                paths:
                        - maat-$CI_COMMIT_REF_SLUG/
                expire_in: 2 weeks
        needs:
                - package-ubuntu-bionic-amd64-deb

create-repos-tpm:
        stage: deploy
        script:
                - "cd staging"
                - "mkdir -p ubuntu-tpm/conf"
                - "echo 'Origin: APL Maat Repo' > ubuntu-tpm/conf/distributions"
                #- "echo 'Label: APL-Maat' >>  ubuntu/conf/distributions" 
                #- "echo 'Codename: trusty' >>  ubuntu/conf/distributions"  
                #- "echo 'Architectures: i386 amd64'  >>  ubuntu/conf/distributions"
                #- "echo 'Components: multiverse' >>  ubuntu/conf/distributions"
                #- "echo 'Description: The official APL Maat Repo'  >>  ubuntu/conf/distributions"
                #- "echo 'SignWith: 8DC43B64'  >>  ubuntu/conf/distributions"
                #- "echo '' >>  ubuntu/conf/distributions"
                #- "echo 'Origin: APL Maat Repo' >> ubuntu/conf/distributions"
                #- "echo 'Label: APL-Maat' >>  ubuntu/conf/distributions"
                #- "echo 'Codename: xenial' >>  ubuntu/conf/distributions"  
                #- "echo 'Architectures: i386 amd64'  >>  ubuntu/conf/distributions"
                #- "echo 'Components: multiverse' >>  ubuntu/conf/distributions"
                #- "echo 'Description: The official APL Maat Repo'  >>  ubuntu/conf/distributions"
                #- "echo 'SignWith: 8DC43B64'  >>  ubuntu/conf/distributions"
                #- "echo '' >>  ubuntu/conf/distributions"
                #- "echo 'Origin: APL Maat Repo' >> ubuntu/conf/distributions"
                - "echo 'Label: APL-Maat' >>  ubuntu-tpm/conf/distributions"
                - "echo 'Codename: focal' >>  ubuntu-tpm/conf/distributions"  
                - "echo 'Architectures: i386 amd64 arm64 armhf ppc64el'  >>  ubuntu-tpm/conf/distributions"
                - "echo 'Components: multiverse' >>  ubuntu-tpm/conf/distributions"
                - "echo 'Description: The official APL Maat Repo'  >>  ubuntu-tpm/conf/distributions"
                - "echo 'SignWith: 78C0DC724E774146EEF1DC04F298618BA7EB5A7E'  >>  ubuntu-tpm/conf/distributions"
                - "echo '' >>  ubuntu-tpm/conf/distributions"
                - "echo 'basedir .' > ubuntu-tpm/conf/options"
                - cd ubuntu-tpm
                #- reprepro -V includedeb trusty ../trusty-*-results/maat*.deb
                #- reprepro -V includedeb xenial ../xenial-*-results/maat*.deb
                - reprepro -V includedeb focal ../focal-*-results/maat*.deb
                - cd ../..
                - mv staging maat-$CI_COMMIT_REF_SLUG
                - "scp -r maat-$CI_COMMIT_REF_SLUG builder@manda-archive.jhuapl.edu:public_html/maat/"

        tags:
                - maat-swtpm
        artifacts:
                paths:
                        - maat-$CI_COMMIT_REF_SLUG/
                expire_in: 2 weeks
        needs:
                - package-ubuntu-focal-amd64-deb

system-test-selinux-rh7:
        stage: systemtest
        dependencies: []
        before_script:
                - "sudo killall -15 attestmgr || true"
                - "sudo killall -9 attestmgr || true"
                - sudo yum remove maat maat-selinux -y || true
        script:
                - echo '[maat-redhat]' > maat.repo
                - echo 'name=Maat RPM Repo' >> maat.repo
                - echo 'baseurl=http://manda-archive.jhuapl.edu/~builder/maat/maat-ci/maat-redhat/epel/7/x86_64' >> maat.repo
                - echo 'enabled=1' >> maat.repo
                - echo 'gpgcheck=0' >> maat.repo
                - cat maat.repo
                - sudo cp maat.repo /etc/yum.repos.d
                - sudo yum install maat maat-selinux -y
                - sudo cp demo/credentials/client.pem /etc/maat/credentials
                - sudo cp demo/credentials/client.key /etc/maat/credentials
                - echo '========= Test system updated to latest maat source ======'
                - echo '============ Testing Demo 1 from TUTORIAL.md'
                - echo '====== starting appraiser'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2342 -u /tmp/app.sock -C /etc/maat/minimal-am-config.xml &
                - echo '====== starting attester'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2343 -u /tmp/att.sock -C /etc/maat/minimal-am-config.xml &
                - sleep 10
                - echo '====== starting test'
                - "/usr/bin/test_client  -l localhost -a 2342 -t localhost -p 2343 -r processes | tee test_client.log || true"
                - echo "====== Cleaning up"
                - "kill %2 || true"
                - "kill %1 || true"
                - sudo rm -f /etc/maat/credentials/client.*
                - "if ! grep PASS test_client.log ; then echo 'Did not find PASS!' ; exit 1 ; fi"
                - cat test_client.log
        timeout: 2 hours
        allow_failure: true
        tags:
                - system-test

system-test-maat:
        stage: systemtest
        variables:
                release: bionic
                arch: amd64
        dependencies: []
        before_script:
                - "sudo killall -15 attestmgr || true"
                - "sudo killall -9 attestmgr || true"

        script:
                - "echo \"${CI_COMMIT_REF_SLUG}\" > .maat_branch"
                - "echo -n 'deb [allow-insecure=yes] http://manda-archive.jhuapl.edu/~builder/maat/maat-' >> maat.list"
                - "echo -n `cat .maat_branch` >> maat.list"
                - "echo -n '/ubuntu ' >> maat.list "
                - "echo -n ${release} >> maat.list"
                - "echo ' multiverse'  >> maat.list"
                - cat maat.list
                - lsb_release -a
                - sudo cp maat.list /etc/apt/sources.list.d
                - sudo apt-get --allow-unauthenticated update 
                - sudo apt-get --allow-unauthenticated -y --reinstall install maat
                - sudo cp demo/credentials/client.pem /etc/maat/credentials 
                - sudo cp demo/credentials/client.key /etc/maat/credentials 
                - echo '========= Test system updated to latest maat source ======'
                - echo '============ Testing Demo 1 from TUTORIAL.md'
                - echo '====== starting appraiser'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2342 -u /tmp/app.sock -C /etc/maat/minimal-am-config.xml &
                - echo '====== starting attester'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2343 -u /tmp/att.sock -C /etc/maat/minimal-am-config.xml &
                - sleep 10
                - echo '====== starting test'
                - "/usr/bin/test_client  -l localhost -a 2342 -t localhost -p 2343 -r processes | tee test_client.log || true"
                - echo "====== Cleaning up"
                - "kill %2 || true"
                - "kill %1 || true"
                - "killall -15 attestmgr || true"
                - "killall -9 attestmgr || true"
                - "sudo apt remove --assume-yes maat libmaat1 || true"
                - "sudo rm -f /etc/maat/credentials/client.*"
                - "if ! grep PASS test_client.log ; then echo 'Did not find PASS!' ; exit 1 ; fi"
                - "cat test_client.log"

        #after_script:
        #        - "sudo killall -15 attestmgr || true"
        #        - "sudo killall -9 attestmgr || true"
        #        - "sudo apt remove --assume-yes maat libmaat1 || true"
        #        - "sudo rm -f /etc/maat/credentials/client.*"
        tags:
                - maat-deploy-test-only

system-test-maat-tpm:
        stage: systemtest
        variables:
                release: focal
                arch: amd64
        dependencies: []
        before_script:
                - "sudo killall -15 attestmgr || true"
                - "sudo killall -9 attestmgr || true"

        script:
                - "echo \"${CI_COMMIT_REF_SLUG}\" > .maat_branch"
                - "echo -n 'deb [allow-insecure=yes] http://manda-archive.jhuapl.edu/~builder/maat/maat-' >> maat.list"
                - "echo -n `cat .maat_branch` >> maat.list"
                - "echo -n '/ubuntu-tpm ' >> maat.list "
                - "echo -n ${release} >> maat.list"
                - "echo ' multiverse'  >> maat.list"
                - cat maat.list
                - lsb_release -a
                - sudo cp maat.list /etc/apt/sources.list.d
                - sudo apt-get --allow-unauthenticated update 
                - sudo apt-get --allow-unauthenticated -y --reinstall install maat
                - sudo cp demo/credentials/client.pem /etc/maat/credentials 
                - sudo cp demo/credentials/client.key /etc/maat/credentials 
                - sudo cp demo/credentials/ak.ctx /etc/maat/credentials 
                - sudo cp demo/credentials/akpub.pem /etc/maat/credentials 
                - echo '========= Test system updated to latest maat source ======'
                - echo '============ Testing Demo 1 from TUTORIAL.md'
                - echo '====== starting appraiser'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2342 -u /tmp/app.sock -C /etc/maat/minimal-am-config.xml &
                - echo '====== starting attester'
                - LIBMAAT_LOG_SYSLOG=0 /usr/bin/attestmgr -i 127.0.0.1:2343 -u /tmp/att.sock -C /etc/maat/minimal-am-config.xml &
                - sleep 10
                - echo '====== starting test'
                - "/usr/bin/test_client  -l localhost -a 2342 -t localhost -p 2343 -r processes | tee test_client.log || true"
                - echo "====== Cleaning up"
                - "kill %2 || true"
                - "kill %1 || true"
                - "killall -15 attestmgr || true"
                - "killall -9 attestmgr || true"
                - "sudo apt remove --assume-yes maat libmaat1 || true"
                - "sudo rm -f /etc/maat/credentials/client.*"
                - "sudo rm -f /etc/maat/credentials/ak*"
                - "if ! grep PASS test_client.log ; then echo 'Did not find PASS!' ; exit 1 ; fi"
                - "cat test_client.log"

        #after_script:
        #        - "sudo killall -15 attestmgr || true"
        #        - "sudo killall -9 attestmgr || true"
        #        - "sudo apt remove --assume-yes maat libmaat1 || true"
        #        - "sudo rm -f /etc/maat/credentials/client.*"
        tags:
                - maat-swtpm

kickoff-saracode:
        stage: sara-kickoff
        variables:
                GIT_SSL_NO_VERIFY: "1"
        script:
                - "git archive --format=tar --prefix=maat/ HEAD | gzip -c > maat.tar.gz"
                - "HDR=\"X-Auth-Token: ${SARACODE_TOKEN}\""
                - "ROOT=https://saracode-backend.jhuapl.edu/v2/project"
                - "BUILD_ID=$(curl -s -k -F tarball=@maat.tar.gz -F build_name=$(git rev-parse HEAD) -X POST -H \"${HDR}\" ${ROOT}/analyze/58)"
                - "echo \"${BUILD_ID}\" | grep -qv '^[[:digit:]]*$' && (echo \"Failed to create build: ${BUILD_ID}\" ; exit 1) || /bin/true"
                - "echo BUILD_ID=${BUILD_ID} | tee saracode_build_id"
        allow_failure: true
        artifacts:
                paths:
                        - saracode_build_id
                expire_in: 2 hours
                when: on_success

# collect-saracode:
#         stage: sara-collect
#         variables:
#                 GIT_SSL_NO_VERIFY: "1"
#         script:
#                 - "HDR=\"X-Auth-Token: ${SARACODE_TOKEN}\""
#                 - "ROOT=https://saracode-backend.jhuapl.edu/v2/project"
#                 - . ./saracode_build_id
#                 - "echo BUILD_ID=${BUILD_ID}"
#                 - "while [ \"x$(curl -s -k -H \"${HDR}\" ${ROOT}/analysis/${BUILD_ID}/ready)\" = \"xfalse\" ]; do sleep 5; done"
#                 - "curl -s -k -H \"${HDR}\" ${ROOT}/issues/${BUILD_ID} > issues.csv"
#                 - "curl -s -k -H \"${HDR}\" ${ROOT}/analysis/${BUILD_ID}/console > console.txt"
#                 - "function issue_file(){ echo $1 | cut -d ',' -f 4 | sed -e 's|^maat/||';}"
#                 - "function issue_line(){ echo $1 | cut -d ',' -f 5;}"
#                 - "function issue_message(){ echo $1 | cut -d ',' -f 9-; }"
#                 - "function issue_tool(){ echo $1 | cut -d ',' -f 3;}"
#                 - "function note_for_issue(){ echo -e \"$(issue_file \"$1\"):$(issue_line \"$1\")\\n\\n$(issue_message \"$1\")\\n\\nReported by $(issue_tool \"$1\")\"; }"
#                 - "function issue_file_changed(){ git diff --name-only origin/unstable | grep -q \"$(issue_file \"$1\")\"; }"
#                 - "COMMENT_URL=https://iol-gitlab.jhuapl.edu/api/v4/projects/14/repository/commits/$(git rev-list HEAD -1)/comments"
#                 - "function post_comment(){ curl -f -k -X POST ${COMMENT_URL} --header \"private-token: $COMMENT_POSTING_TOKEN\" --form \"note=$(note_for_issue \"$1\")\" --form \"path=$(issue_file \"$1\")\" --form \"line=$(issue_line \"$1\")\" --form \"line_type=new\" || echo \"failed to post\";}"
#                 - "( read ; while read issue; do if issue_file_changed $issue; then echo \"Adding comment for issue: $issue\"; post_comment \"$issue\"; fi; done ) < issues.csv" 
#         allow_failure: true
#         artifacts:
#                 paths:
#                         - issues.csv
#                         - console.txt
#                 expire_in: 2 weeks
#                 when: always
#         needs:
#                 - kickoff-saracode
