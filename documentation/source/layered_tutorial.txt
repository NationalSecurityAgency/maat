Layered Appraisal Maat Tutorial
********************************

.. Copyright

   Copyright 2022 United States Government

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

.. currentmodule:: maat

.. _layered_tutorial:


Introduction
============

These instructions give you instructions to set up and perform a multi-realm
appraisal demonstration. In this scenario, a relying party wants to determine if an application
that is operating in an unprivileged domain of a hypervisor platform is in an expected state.
A dedicated measurement domain on the platform would negotiate what measurement would be taken
and, in turn, request various other components within the environment contribute measurements to
produce a holistic picture of the attesting environment.

In specific, the measurement would be composed of a strictly ordered set of a runtime and
userspace measurement of the most privileged domain (Dom0), the measurement domain itself
(DomM), and a designated target domain hosting a userland application of some interest (DomT).
These measurements will be bundled by the measurement APB operating in the DomM and then sent
to another platform to be appraised, the result of which will be returned to the test client.

One important detail is that the strict measurement ordering enforced in this APB allows an appraiser
to justify acceptance of the validity of measurements of less privileged domains in successful appraisals
of more privileged domains. Such appraisals demonstrate that the state of operational interfaces that
higher privilege levels provide to lower privilege domains are in an expected state, which in turn
provides the basis to infer that measurements taken of lower privilege levels that result in
a passing appraisal have not been manipulated by an adversary in a higher privilege level.
In effect, a chain of measurements is created, rooted in a hardware protected measurement of the
hypervisor itself, that constrains how an adversary is able to manipulate the platform in a way that
cannot be detected by one or more measurements.

Another important detail is that the measurement domain effectively acts as a broker for attestation
requests with the hypervisor platform. The attestation manager operating in the measurement domain is
installed with a selection policy that allows it to negotiate over Copland phrases that represent the platform
hoslistically. Additionally, the attestation managers on the platform, with the exception of the attestation
manager operating in the measurement domain, are configured to accept requests for measurements from the
attestation manager in the measurement domain, without any negotiation. In this way, the negotiation policy
is effectively encoded in the measurement domain and it operates on behalf of the platform to negotiate
acceptable attestations. There would be substantial overhead in requiring an appraiser to negotiate with every
single component of the platform, and furthermore it is challenging to characterize how the appraiser and
relying party should proceed if portions of the attestating platform do not agree to perform attestation but
others do.

This demonstration does not utlize a hardware based measurement to act as the "anchor" as described previously,
because no such measurement is currently bundled with Maat. This serves as a demonstration of the workflow of taking
such a measurement, but based on this, cannot be taken to be an operationalized version of this type of measurement
by itself.

Layered Appraisal Demonstration
================================

This demo involves four AMs:
- AM_1 : Measurement Domain (DomM)
- AM_2 : Management Domain (Dom0)
- AM_3 : Target Domain (DomT)
- AM_4 : Appraisal Platform

In order to exercise this use-case in its most truest sense, AM_1, AM_2, and AM_3
would all be operating in various domains on the same hypervisor enabled host, while
AM_4 should operate on a seperate platform with no specific constraints. If this is impractical,
however, all 4 AMs could operate on different Virtual Machines (VM), or even the same VM. Although
these measurements would not capture the intended trust relationship in the former case, and would
be redundant in the latter case, either could be sufficient to demonstrate that the plumbing of
this use case is operational.

In this demo, we will demonstrate this use case on a hypervisor based platform as it is intended to be
used. More specifically, AM_1, AM_2, and AM_3 are running on domains of the hypervisor platform P_1, while
AM_4 is running on a seperate platform P_2 that can communicate with P_1.

Explanation of Demo
-------------------
Here's what will happen in the demo:

```
1. The requester sends a request to AM_4 running on P_1 to appraise an attestation of the resource 'layered-attestation'

   The Copland phrase that the client will request is the following:
   * @_md(@_0(runtime_meas_sign)-<-@_0(USM full)-<-KIM runtime_meas_sign-<-USM full-<-@_t(runtime_meas_sign)-<-@_t(USM full))
         _______________
        |      P_1      |
        |   (1) ______  |
       R------>|      | |
        |      | AM_4 | |
        |      |______| |
        |_______________|

2. AM_4 triggers a negotiation with AM_1 in order to determine if it is
   willing and able to take the measurement represented by the phrase.
                                       ________________________
                                      |          P_2           |
        _______________               |         ______         |
       |      P_1      |              |        |      |        |
       |      ______   |              |        | AM_2 |        |
       |     |      |  |     (2)      |        |______|        |
       |     | AM_4 |<--------'       |   ______      ______   |
       |     |______|  |      |       |  |      |    |      |  |
       |_______________|      '--------->| AM_1 |    | AM_3 |  |
                                      |  |______|    |______|  |
                                      |________________________|

3. After deciding that the phrase is satisfatory, AM_1 forks the Layered
   Attestation APB to take the measurement while AM_4 forks the APB which
   will appraise the measurement.
                                       ________________________
                                      |          P_2           |
        _______________               |         ______         |
       |      P_1      |              |        |      |        |
       |     ______    |              |        | AM_2 |        |
       |    |      |   |              |        |______|        |
       |    | AM_4 |   |              |   ______      ______   |
       |    |______|   |              |  |      |    |      |  |
       |       |       |              |  | AM_1 |    | AM_3 |  |
       |       | (3)   |              |  |______|    |______|  |
       |     [APP]     |              |     |                  |
       |_______________|              |     | (3)              |
                                      |  [LAYER]               |
                                      |________________________|

4. Given the ordering within the Copland phrase, the Layered Attestation APB
   spawns the Send Execute TCP ASP to send an execute contract to AM_2 for
   the phrase (KIM runtime_meas_sign), which takes a rumtime measurement of
   the kernel.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______  ^   ______   |
       |  |      | |  |      |  |
       |  | AM_1 | |  | AM_3 |  |
       |  |______| |  |______|  |
       |     |     |            |
       |  [LAYER]  |            |
       |     | (4) |            |
       |  [s_exe]--'            |
       |________________________|

5. AM_2 spawns the KIM APB, which in turn, spawns the KIM ASP, in order to take
   a runtime integrity measurement of the kernel in the domain in which AM_2 is
   operating.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |           |            |
       |         [KIM]          |
       |           | (5)        |
       |         [kim]          |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |                  |
       |  [LAYER]               |
       |     |                  |
       |  [s_exe]               |
       |________________________|

6. The results of the KIM measurement are sent from the KIM APB in AM_2 to the
   Send Execute TCP ASP forked from the Layered Attestation APB in AM_1. This
   involves a set of ASPs we will call the sign-send pipeline. The relevant ASPs include the:
       * Serialize ASP - serialize a measurement graph into a buffer
       * Compress ASP - compresses the serialized measurement buffer
       * Create Contract ASP - creates the measurement contract which holds the
	  	       	               measurement
       * Encrypt ASP - encrypts the measurement and contract
       * Send ASP - sends the encrypted buffer to the intended recipient
   For the sake of brevity, we will refer to these ASPs in aggregate as the
   sign-send pipeline in future.

7. The Send Execute TCP ASP in AM_1 receieves the measurement contract from AM_2.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |           |            |
       |         [KIM]          |
       |          ^ |   (6)     |
       |          | '------'    |
       |      {sign-send}<-'    |
       |   ______  |    ______  |
       |  |      | |   |      | |
       |  | AM_1 | |   | AM_3 | |
       |  |______| |   |______| |
       |     |     |            |
       |  [LAYER]  |            |
       |     |  (7)|            |
       |  [s_exe]<-'            |
       |________________________|

8. The Layered Attestation APB extracts the measurement from the measurement contract received
   from AM_2 using a set of ASPs we will collectively refer to as the execute-receive pipeline.
   The relevant ASPs include the:
       * Verify Contract ASP - verifies that the measurement contract is cryptographically
                               signed, if that is required for this interaction, and well
                               formed. Unlike the other ASPs, this does not process the
                               contract and write out the transformation of this processing,
                               but rather writes a boolean response as to whether the contract
                               was successfully verified
       * Decrypt ASP - Decrypts the contents of the measurement contract
       * Decompress ASP - Decompresses the serialized measurement buffer
   For the sake of brevity, we will refer to these ASPs in aggregate as the
   receive-verify pipeline in future.

9. The measurement is extracted from the measurement contract and is placed into the measurement
   graph being developed in AM_1.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     | (9)              |
       |  [LAYER]--'            |
       |     ^     |            |
       |     |  (8)|            |
       | {exe-rec}<'            |
       |________________________|

10. Given the ordering within the Copland phrase, the Layered Attestation APB
    spawns the Send Execute TCP ASP to send an execute contract to AM_2 for
    the phrase (USM full), which orchestrates measurements of the userspace
    environment of Dom0.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______  ^   ______   |
       |  |      | |  |      |  |
       |  | AM_1 | |  | AM_3 |  |
       |  |______| |  |______|  |
       |     |     |            |
       |  [LAYER]  |            |
       |     | (10)|            |
       |  [s_exe]--'            |
       |________________________|

11. AM_2 spawns the USM APB, which in turn, spawns a set of ASPs which collect
    measurements of the userspace environment of Dom0.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |           |            |
       |         [USM]          |
       |           | (11)       |
       |         [asps]         |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |                  |
       |  [LAYER]               |
       |     |                  |
       |  [s_exe]               |
       |________________________|

12. The results of the USM measurement are sent from the USM APB in AM_2 to the
    Send Execute TCP ASP forked from the Layered Attestation APB in AM_1. This is
    done using the sign-send pipeline of ASPs.

13. The Send Execute TCP ASP in AM_1 receieves the measurement contract from AM_2.
    At this point, AM_2 plays no further role in this scenario.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |           |            |
       |         [ASPs]         |
       |          ^ |   (12)    |
       |          | '------'    |
       |      {sign-send}<-'    |
       |   ______  |    ______  |
       |  |      | |   |      | |
       |  | AM_1 | |   | AM_3 | |
       |  |______| |   |______| |
       |     |     |            |
       |  [LAYER]  |            |
       |     | (13)|            |
       |  [s_exe]<-'            |
       |________________________|

14. The Layered Attestation APB in AM_1 extracts the measurement from the measurement contract
    received from AM_2 using the execute-receive pipeline and places it into the measurement graph.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |                  |
       |     |                  |
       |  [LAYER]--'            |
       |     ^     |            |
       |     | (14)|            |
       | {exe-rec}<'            |
       |________________________|

15. Given the ordering of the Copland phrase, the Layered Attestation APB in AM_1 collects a measurement
    corresponding to the phrase (KIM runtime_meas_sign) by launching the KIM ASP and placing the result
    into the measurement graph.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |                  |
       |     |                  |
       |  [LAYER]               |
       |     | (15)             |
       |   [kim]                |
       |________________________|

 16. Given the ordering of the Copland phrase, the Layered Attestation APB in AM_1 collects a measurement
     corresponding to the phrase (USM full) by launching a series of ASPs which take measurements of the
     userspace of DomM and place them onto the measurement graph being created by AM_1.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |                  |
       |     |                  |
       |  [LAYER]               |
       |     | (16)             |
       |  [asps]                |
       |________________________|

17. Given the ordering within the Copland phrase, the Layered Attestation APB
    spawns the Send Execute TCP ASP to send an execute contract to AM_3 for
    the phrase (KIM runtime_meas_sign), which takes a rumtime measurement of
    the kernel.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |           ^      |
       |  [LAYER]        |      |
       |     | (17)      |      |
       |  [s_exe]--------'      |
       |________________________|

18. AM_3 spawns the KIM APB, which in turn, spawns the KIM ASP, in order to take
    a runtime integrity measurement of the kernel in the domain in which AM_3 is
    operating.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |           |      |
       |  [LAYER]      [KIM]    |
       |     |           | (18) |
       |  [s_exe]      [kim]    |
       |________________________|

19. The results of the KIM measurement are sent from the KIM APB in AM_3 to the
    Send Execute TCP ASP forked from the Layered Attestation APB in AM_1 using
    the sign-send pipeline.

20. The Send Execute TCP ASP in AM_1 receieves the measurement contract from AM_3.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |            | (19)|
       |  [LAYER]    '->[KIM]-' |
       |     |  (20) |        | |
       |  [s_exe]<{sign-send}-' |
       |________________________|

21. The Layered Attestation APB in AM_1 extracts the measurement from the measurement
    contract received from AM_3 using the execute-receive pipeline and places it into
    the measurement graph.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |                  |
       |  [LAYER]--'            |
       |     ^     |            |
       |     | (21)|            |
       | {exe-rec}<'            |
       |________________________|

22. Given the ordering within the Copland phrase, the Layered Attestation APB
    spawns the Send Execute TCP ASP to send an execute contract to AM_3 for
    the phrase (USM full), which orchestrates measurements of the userspace
    environment of Dom0.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |           ^      |
       |  [LAYER]        |      |
       |     | (22)      |      |
       |  [s_exe]--------'      |
       |________________________|

23. AM_3 spawns the USM APB, which in turn, spawns a set of ASPs which collect
    measurements of the userspace environment of Dom0.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______      ______   |
       |  |      |    |      |  |
       |  | AM_1 |    | AM_3 |  |
       |  |______|    |______|  |
       |     |           |      |
       |  [LAYER]      [USM]    |
       |     |           | (23) |
       |  [s_exe]      [asps]   |
       |________________________|

24. The results of the USM measurement, encapsulated in a measurement contract, are
    sent from the USM APB in AM_3 to the Send Execute TCP ASP forked from the Layered
    Attestation APB in AM_1. This is done using the sign-send pipeline of ASPs.

25. The Send Execute TCP ASP in AM_1 receieves the measurement contract from AM_3.
    AM_3 does not play a further role in this scenario.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |            | (24)|
       |  [LAYER]    '->[USM]-' |
       |     |  (25) |        | |
       |  [s_exe]<{sign-send}-' |
       |________________________|

26. The Layered Attestation APB extracts the measurement from the measurement contract received
    from AM_3 using the execute-receive pipeline and places it into the measurement graph that is
    being created in AM_1. At this point, all the components of the measurement have been collected
    from the disparate domains of P_2.
        ________________________
       |          P_2           |
       |         ______         |
       |        |      |        |
       |        | AM_2 |        |
       |        |______|        |
       |   ______       ______  |
       |  |      |     |      | |
       |  | AM_1 |     | AM_3 | |
       |  |______|     |______| |
       |     |                  |
       |  [LAYER]--'            |
       |     ^     |            |
       |     | (26)|            |
       | {exe-rec}<'            |
       |________________________|

27. The now completed measurement graph in AM_1 is placed into a measurement contract and sent to AM_4 for
    appraisal. This is done using the sign-send pipeline of ASPs. At this point AM_1, and by extension,
    P_2, no longer plays a role in this scenario.

28. At this point, the Layered Attestation Appraisal APB in AM_4 receieves the measurement contract
    from AM_1 using a set of ASPs that include some of the same ASPs as the execute-receive pipeline,
    but also includes other. The ASPs used are as follows:
        * Receive ASP - receives a buffer from a socket
        * Verify Contract ASP - verifies that the measurement contract is cryptographically
                                signed, if that is required for this interaction, and well
                                formed. Unlike the other ASPs, this does not process the
                                contract and write out the transformation of this processing,
                                but rather writes a boolean response as to whether the contract
                                was successfully verified
        * Decrypt ASP - Decrypts the contents of the measurement contract
        * Decompress ASP - Decompresses the serialized measurement buffer
        * Deserialize ASP - Deserialize the measurement graph from the measurement buffer
    For the sake of brevity, we will refer to this as the receive-graph pipeline.
                                       ________________________
                                      |          P_2           |
        _______________               |         ______         |
       |      P_1      |              |        |      |        |
       |     ______    |              |        | AM_2 |        |
       |    |      |   |              |        |______|        |
       |    | AM_4 |   |              |   ______      ______   |
       |    |______|   |              |  |      |    |      |  |
       |       |       |              |  | AM_1 |    | AM_3 |  |
       |       |(28)   |              |  |______|    |______|  |
       |'--->[APP]----'|              |     |                  |
       ||             ||              |     |                  |
       |'{recv-graph}<'-------'       |     |                  |
       |_______________|      |       |     | (27)             |
                              |       |'>[LAYER]----'          |
                              |       ||            |          |
                              '--------'{sign-send}<'          |
                                      |________________________|

29. The Layered Appraisal APB in AM_4 launches a set of ASPs in order to appraise the
    measurement graph from AM_1 and from those appraisals determines an overall appraisal
    result.

30. The Layered Appraisal APB in AM_4 sends a response contract to the requestor which
    includes the overall appraisal result. At this point, the scenario is complete.
         _______________
        |      P_1      |
        |  (30) ______  |
       R<---'  |      | |
        |   |  | AM_4 | |
        |   |  |______| |
        |   |     |     |
        |   |     |     |
        |   '----[APP]  |
        |         | (29)|
        |       [asps]  |
        |_______________|

```

Process
-------

A prerequisite to running this demo is an operational platform running a hypervisor. This demo is agnostic to the
choice of hypervisor, but this guide recommends the use of Xen. For information regarding the installation of Xen,
as well as the creation of networking resources and user domains, please consult the following page:
`https://wiki.xenproject.org/wiki/Xen_Project_Beginners_Guide`. You will need to create 2 domains, one of which will
be the DomM and the other of which will be the DomT, which, like Dom0, must be based on an operating system which
supports Maat. All domains, including Dom0, must be installed with an operating system that is supported by Maat.
Furthermore, your hypervisor must be configured to, at a minimum, allow network communication between DomM and all of
the other domains on the platform.

In addition, there must be another platform on which the appraiser will operate. This platform, unlike the attesting
environment, can simply be a virtual machine or bare metal installation running a platform supported by Maat.

On each domain or platform, Maat must be installed. In order to install Maat, follow the directions that are located
in the :ref:`Quick Start Guide <quick_start>` and ensure that Maat is working correctly with the example scenarios
outlined in the :ref:`Basic Tutorial <basic_tutorial>`.

To support the demo, you will need to copy `demo/ancillary_files/layered-am-config.xml` to `/opt/maat/etc/maat/`. It is
worth exploring a specific change in the AM configuration file that we are using which makes it distinct from the AM
configuration that is traditionally used for Maat. In particular, we set the interface on which the AM is to listen for
connections to permit other AMs to make measurement requests which can bypass negotiation. This means that if another AM sends an AM configured in
this manner an execute contract for a specific Copland phrase, the receiving AM will accept this execute contract even though
no negotiation has occurred, execute the APB corresponding to the Copland phrase, and send back a measurement contract
back to the requesting AM. This is an insecure setting which should not be used in a production environment, but is suitable in
order to simplify the configuration aspects of the demo. Although the plumbing exists within Maat to support bypassing negotiation,
there currently is not a capability to generate and keep track of a list of privileged hosts from which an AM may permit bypassing
negotiation in a targeted manner. This is future work which is on our roadmap.

---

This demo uses 3 seperate VMs to simulate the interaction in a more realistic 
manner. 

The demo setup will look as follows, with the test client being spawned 
on the distinct VM_0:

Directions to set up the VMs are located in the :ref:`Setup Multirealms Guide <setup_multirealms>`. 

```
 ____________     ____________     _____________
|    VM_0    |   |    VM_1    |   |    VM_2    |
|   _____    |   |   ______   |   |   ______   |
|  |     |   |   |  |      |  |   |  |      |  |
|  | T_C |   |   |  | AM_1 |  |   |  | AM_2 |  |
|  |_____|   |   |  |______|  |   |  |______|  |
|____________|   |____________|   |____________|
```

On VM_0:

    Set IP to 192.168.0.5 and open port 2342

On VM_1:

   Set IP to 192.168.0.10 and open port 2343

On VM_2:

   Set IP to 192.168.0.7 and open port 2342

The complex attestation use case will rely upon a backend database on VM_1 with the
IP address and port information for VM_1 and VM_2. This is intended to simulate
an environment in which machines are registed with the appraiser in some fashion
and the appraiser can use this information about other AMs in order to carry out
functionality within APBs. A simple CSV example file is provided with Maat,
and can be placed where Maat will use it with the following command:

    sudo cp demo/ancillary_files/places.csv /opt/maat/etc/maat

To start the scenario, you must start AM_0 and AM_1. To do so, run

On VM_1:

    sudo LIBMAAT_LOG_SYSLOG=0 /opt/maat/bin/attestmgr -i 192.168.0.10:2343 \
      -C /opt/maat/etc/maat/minimal-am-config.xml -m COPLAND \
      -s /opt/maat/share/maat/selector-configurations/complex-att-selector.xml

On VM_2:

    sudo LIBMAAT_LOG_SYSLOG=0 /opt/maat/bin/attestmgr -i 192.168.0.7:2342 \
      -C /opt/maat/etc/maat/minimal-am-config.xml -m COPLAND \
      -s /opt/maat/share/maat/selector-configurations/complex-att-selector.xml

To take the measurement, you must invoke the test client on VM_0 using 
the following:

    /opt/maat/bin/test_client -l 192.168.0.10 -t 192.168.0.10 -a 2343 \
      -p 2343 -r complex-attestation

The expected output at the test client is similar to the following (with the 
measurement, signature, and certificate info omitted for brevity): 

```
<contract version="2.0" type="response"><target type="host-port">192.168.0.10</target><resource>complex-attestation</resource><result>UNKN</result><data><entry><key>No-op appraisal</key><value>
(...)
</value></entry></data><AttestationCredential fingerprint="A5:2C:D0:4E:1A:75:1F:7D:60:9F:2B:A6:D1:7D:EA:53:BD:42:B7:FD">
(...)
</AttestationCredential><signature><signedinfo><canonicalizationmethod algorithm="XML C14N 1.0"/><signaturemethod algorithm="RSA"/><digestmethod algorithm="SHA-1"/></signedinfo><signaturevalue>
(...)
</signaturevalue><keyinfo>A5:2C:D0:4E:1A:75:1F:7D:60:9F:2B:A6:D1:7D:EA:53:BD:42:B7:FD</keyinfo></signature></contract>

```

The 'UNKN' result indicates that the no-op appraisal was performed in this use
case (meaning that the measurement was packaged inside the response contract
without appraisal). The forthcoming 'complex appraisal' use case will cover
appraisal of this measurement. 

This concludes the Maat tutorials. To explore how to configure the Maat AM for
your specific use case, please see the
:ref:`AM Configuration Guide<configuring_attestation_manager>`.
