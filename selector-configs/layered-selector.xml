<!--
# Copyright 2020 United States Government
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 
-->
<!--Selector Policy to demonstrate the layered attestation usecase. For
    more information on this usecase, consult
    <maat directory>/documentation/layered_attestation_tutorial.txt
-->
<selector_policy>
    <collection name="known-clients">
        <entry>127.0.0.1</entry>
        <entry>client2</entry>
        <entry>localhost</entry>
	<entry>192.168.0.10</entry>
	<entry>192.168.0.7</entry>
    </collection>

    <!--Inital Phase and Appraiser Role.
	Check Identity of Client, and offer copland phrase(s)-->
    <rule role="appraiser" phase="initial">
      <match_condition attr="client"  operator="in" value="known-clients" />
      <action selector_action="accept">
	      <condition name="userspace"            apb_phrase="((USM full) -> SIG)"/>
	      <condition name="userspace-processes"  apb_phrase="((USM processes) -> SIG)"/>
	      <condition name="userspace-packages"   apb_phrase="((USM pkginv) -> SIG)"/>
	      <condition name="userspace-hashfiles"  apb_phrase="((USM hashfiles) -> SIG)"/>
              <condition name="userspace-hashfile"   apb_phrase="((USM hashfile file) -> SIG):file=/bin/ls"/>
	      <condition name="userspace-mtab"       apb_phrase="((USM mtab) -> SIG)"/>
	      <condition name="got_measure"          apb_phrase="((USM got) -> SIG)"/>
	      <condition name="runtime-meas"         apb_phrase="(KIM runtime_meas)"/>
	      <condition name="layered-attestation"  apb_phrase="@_0(runtime_meas_sign)-&lt;-@_0(USM full)-&lt;-@_md(runtime_meas_sign)-&lt;-@_md(USM full)-&lt;-@_t(runtime_meas_sign)-&lt;-@_t(USM full):@_0=1,@_md=2,@_t=3"/>
	</action>
    </rule>

    <!--Modify Phase and Attester Role.
	Possible down-select on copland phrase(s)-->
    <rule role="attester" phase="modify">
      <action selector_action="accept">
	      <condition name="userspace"            apb_phrase="((USM full) -> SIG)"/>
	      <condition name="userspace-processes"  apb_phrase="((USM processes) -> SIG)"/>
	      <condition name="userspace-packages"   apb_phrase="((USM pkginv) -> SIG)"/>
	      <condition name="userspace-hashfiles"  apb_phrase="((USM hashfiles) -> SIG)"/>
              <condition name="userspace-hashfile"   apb_phrase="((USM hashfile file) -> SIG):file=/bin/ls"/>
	      <condition name="userspace-mtab"       apb_phrase="((USM mtab) -> SIG)"/>
	      <condition name="got_measure"          apb_phrase="((USM got) -> SIG)"/>
	      <condition name="runtime-meas"         apb_phrase="(KIM runtime_meas)"/>
	      <condition name="layered-attestation"  apb_phrase="@_0(runtime_meas_sign)-&lt;-@_0(USM full)-&lt;-@_md(runtime_meas_sign)-&lt;-@_md(USM full)-&lt;-@_t(runtime_meas_sign)-&lt;-@_t(USM full):@_0=1,@_md=2,@_t=3"/>
    	</action>
    </rule>

    <!--Execute Phase and Appraiser Role.
	Choose copland phrase for Attester to execute, depending on
	resource requested-->
    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="layered-attestation"/>
        <action selector_action="accept">
	      <condition name="layered-attestation"                 apb_phrase="@_0(runtime_meas_sign)-&lt;-@_0(USM full)-&lt;-@_md(runtime_meas_sign)-&lt;-@_md(USM full)-&lt;-@_t(runtime_meas_sign)-&lt;-@_t(USM full):@_0=1,@_md=2,@_t=3"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="runtime-meas"/>
        <action selector_action="accept">
	      <condition name="runtime-meas"                 apb_phrase="(KIM runtime_meas)"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="got_measure"/>
        <action selector_action="accept">
	      <condition name="got_measure"                 apb_phrase="((USM got) -> SIG)"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="userspace-mtab"/>
        <action selector_action="accept">
	      <condition name="userspace-mtab"                 apb_phrase="((USM mtab) -> SIG)"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="userspace-hashfile"/>
        <action selector_action="accept">
	      <condition name="userspace-hashfile"                 apb_phrase="((USM hashfile file) -> SIG):file=/bin/ls"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="userspace-packages"/>
        <action selector_action="accept">
	      <condition name="userspace-packages"                 apb_phrase="((USM hashfiles) -> SIG)"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="userspace-processes"/>
        <action selector_action="accept">
	      <condition name="userspace-processes"                 apb_phrase="((USM processes) -> SIG)"/>
	</action>
    </rule>

    <rule role="appraiser" phase="execute">
	<match_condition attr="resource" operator="is" value="userspace"/>
        <action selector_action="accept">
	      <condition name="userspace"                 apb_phrase="((USM full) -> SIG)"/>
	</action>
    </rule>

    <!--Spawn Phase and Appraiser Role.
	Spawn Appraiser apb/mspec to appraise attester output-->

    <!--If resource is a runtime measurement, use no_op APB to return measurement-->
    <rule role="appraiser" phase="spawn">
      <match_condition attr="resource" operator="is" value="layered-attestation"/>
      <action selector_action="accept">
	    <condition name="layered-attestation"         apb_phrase="(Layered app):@_0=1,@_md=2,@_t=3"/>
      </action>
    </rule>
</selector_policy>
